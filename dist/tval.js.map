{"version":3,"file":"tval.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACVA;;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;ACbA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;ACjDA;;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAFA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AC1EA;;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AChnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACdtvvpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AEvBA;AACA;AACA;AACA","sources":["webpack://tval/webpack/universalModuleDefinition","webpack://tval/./src/index.ts","webpack://tval/./src/lib/helpers.ts","webpack://tval/./src/lib/tval.ts","webpack://tval/./src/lib/values.ts","webpack://tval/./src/lib/wrapper.ts","webpack://tval/./node_modules/console-table-printer/dist/index.js","webpack://tval/./node_modules/console-table-printer/dist/src/console-table-printer.js","webpack://tval/./node_modules/console-table-printer/dist/src/internalTable/input-converter.js","webpack://tval/./node_modules/console-table-printer/dist/src/internalTable/internal-table-printer.js","webpack://tval/./node_modules/console-table-printer/dist/src/internalTable/internal-table.js","webpack://tval/./node_modules/console-table-printer/dist/src/internalTable/table-pre-processors.js","webpack://tval/./node_modules/console-table-printer/dist/src/utils/colored-console-line.js","webpack://tval/./node_modules/console-table-printer/dist/src/utils/console-utils.js","webpack://tval/./node_modules/console-table-printer/dist/src/utils/string-utils.js","webpack://tval/./node_modules/console-table-printer/dist/src/utils/table-constants.js","webpack://tval/./node_modules/console-table-printer/dist/src/utils/table-helpers.js","webpack://tval/./node_modules/simple-wcswidth/dist/index.js","webpack://tval/./node_modules/simple-wcswidth/dist/src/binary-search.js","webpack://tval/./node_modules/simple-wcswidth/dist/src/non-spacing-chars.js","webpack://tval/./node_modules/simple-wcswidth/dist/src/wcswidth.js","webpack://tval/./node_modules/simple-wcswidth/dist/src/wcwidth.js","webpack://tval/webpack/bootstrap","webpack://tval/webpack/before-startup","webpack://tval/webpack/startup","webpack://tval/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tval\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tval\"] = factory();\n\telse\n\t\troot[\"tval\"] = factory();\n})(typeof self === 'undefined' ? this : self, () => {\nreturn ","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tval_1 = __importDefault(require(\"@lib/tval\"));\nconst values_1 = require(\"@lib/values\");\nconst wrapper_1 = require(\"@lib/wrapper\");\nexports.default = {\n    tvalidate: tval_1.default,\n    n: values_1.n, s: values_1.s, b: values_1.b, a: values_1.a,\n    tablize: wrapper_1.tablize,\n    tvalLog: wrapper_1.tvalLog\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isHTMLElement = exports.numberToType = exports.concat = exports.toString = exports.jParse = exports.isString = exports.isArray = exports.isObject = void 0;\nconst values_1 = require(\"@lib/values\");\nconst isObject = (data) => typeof data === 'object' && !Array.isArray(data) && data !== null;\nexports.isObject = isObject;\nconst isArray = (data) => Array.isArray(data);\nexports.isArray = isArray;\nconst isString = (data) => typeof data === 'string';\nexports.isString = isString;\nconst jParse = (data) => {\n    try {\n        return JSON.parse(data);\n    }\n    catch (error) {\n        console.log(error);\n    }\n};\nexports.jParse = jParse;\nconst toString = (data) => {\n    let result = String(data);\n    if (result === '[object Object]') {\n        result = JSON.stringify(data);\n    }\n    return result;\n};\nexports.toString = toString;\nconst concat = (...strings) => strings.join('');\nexports.concat = concat;\nconst numberToType = (typeNumber, noBrackets = false) => {\n    const wrap = (data) => noBrackets ? data : (0, exports.concat)('(', data, ')');\n    if (Array.isArray(typeNumber)) {\n        const appendDelimiter = (i) => ((typeNumber.length > 1) && (typeNumber.length - 1 > i)) ? ' | ' : '';\n        const result = typeNumber.reduce((acc, curr, i) => acc + (0, exports.numberToType)(curr, true) + appendDelimiter(i), '');\n        return wrap(result);\n    }\n    else {\n        return wrap(values_1.validateUnitTypes[typeNumber]);\n    }\n};\nexports.numberToType = numberToType;\nconst isHTMLElement = function (obj) {\n    try {\n        return !!obj.constructor.__proto__.prototype.constructor.name;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.isHTMLElement = isHTMLElement;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst helpers_1 = require(\"@lib/helpers\");\nconst values_1 = require(\"@lib/values\");\nclass Tval {\n    result = [];\n    value = 999111;\n    constructor(data, rules) {\n        this.process(data, rules);\n    }\n    process(data, check, key = '') {\n        let result;\n        if (check === undefined) {\n            result = this.wrapResult(data, check, 'NO CHECK', key);\n        }\n        else if (data === undefined) {\n            result = this.wrapResult(data, check, 'UNDEFINED', key);\n        }\n        else if (data === null) {\n            result = this.wrapResult(data, check, this.assignValidation(data, check), key);\n        }\n        else if ((0, helpers_1.isObject)(data)) {\n            result = {};\n            Object.keys(data).forEach((objKey) => {\n                if (Object.prototype.hasOwnProperty.call(data, objKey)) {\n                    result[objKey] = this.process(data[objKey], check[objKey], (0, helpers_1.concat)(key, key ? '.' : '', objKey));\n                }\n            });\n        }\n        else if ((0, helpers_1.isArray)(data)) {\n            result = [];\n            data.forEach((el, i) => {\n                result.push(this.process(el, check[0], (0, helpers_1.concat)(key, `[${String(i)}]`)));\n            });\n        }\n        else {\n            result = this.wrapResult(data, check, this.assignValidation(data, check), key);\n        }\n        return result;\n    }\n    assignValidation(data, check) {\n        let result;\n        if (check && Array.isArray(check) && check.length) {\n            result = check.some((el) => this.validateUnit(data, el));\n        }\n        else {\n            result = this.validateUnit(data, check);\n        }\n        return result;\n    }\n    validateUnit(value, validator) {\n        let result;\n        if (validator === values_1.VAL_TYPE.NULL) {\n            result = value === null;\n        }\n        else if (validator === values_1.VAL_TYPE.ANY) {\n            result = true;\n        }\n        else {\n            result = (typeof value === values_1.validateUnitTypes[+validator]);\n        }\n        return result;\n    }\n    wrapResult(data, check, result, key) {\n        if ((0, helpers_1.isObject)(data)) {\n            data = JSON.stringify(data);\n        }\n        this.result.push({ key: key, value: data, validator: check, result: result });\n    }\n}\nfunction tvalidate(data, rules) {\n    const tvalClass = new Tval(data, rules);\n    return tvalClass.result;\n}\nexports.default = tvalidate;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validHTMLElements = exports.validateUnitTypes = exports.VAL_TYPE = exports.a = exports.b = exports.n = exports.s = void 0;\nexports.s = 1;\nexports.n = 2;\nexports.b = 3;\nexports.a = 4;\nvar VAL_TYPE;\n(function (VAL_TYPE) {\n    VAL_TYPE[VAL_TYPE[\"NULL\"] = 0] = \"NULL\";\n    VAL_TYPE[VAL_TYPE[\"STRING\"] = 1] = \"STRING\";\n    VAL_TYPE[VAL_TYPE[\"NUMBER\"] = 2] = \"NUMBER\";\n    VAL_TYPE[VAL_TYPE[\"BOOLEAN\"] = 3] = \"BOOLEAN\";\n    VAL_TYPE[VAL_TYPE[\"ANY\"] = 4] = \"ANY\";\n})(VAL_TYPE = exports.VAL_TYPE || (exports.VAL_TYPE = {}));\nexports.validateUnitTypes = ['null', 'string', 'number', 'boolean', 'any'];\nexports.validHTMLElements = ['th', 'td'];\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tvalLog = exports.tablize = void 0;\nconst console_table_printer_1 = require(\"console-table-printer\");\nconst helpers_1 = require(\"@lib/helpers\");\nconst values_1 = require(\"@lib/values\");\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst { printTable } = require('console-table-printer');\nconst createOrReturnHTMLElement = (el) => {\n    if ((0, helpers_1.isHTMLElement)(el)) {\n        return el;\n    }\n    try {\n        if (typeof el !== 'string') {\n            throw new Error(`\\'${el}\\' must be a string, ${typeof el} given`);\n        }\n        else if (!values_1.validHTMLElements.includes(el)) {\n            throw new Error(`\\'${el}\\' is not a valid tagName, valid names are: ${values_1.validHTMLElements.join(', ')}`);\n        }\n        else {\n            return document.createElement(el);\n        }\n    }\n    catch (e) {\n        throw e;\n    }\n};\nconst appendChildrenWithTextNodes = (parent, childNodeName, childrenData) => {\n    try {\n        if (!Array.isArray(childrenData)) {\n            throw new Error('Child data is not an array');\n        }\n        else if (!childrenData.length) {\n            throw new Error('Child data array is empty');\n        }\n        else {\n            const parentEl = createOrReturnHTMLElement(parent);\n            childrenData.forEach((childContent) => {\n                const newChild = document.createElement(childNodeName);\n                const content = String(childContent);\n                if (content === '[object Object]') {\n                    throw new Error(`Can\\'t convert ${JSON.stringify(childContent)} to string`);\n                }\n                const newChildContent = document.createTextNode(content);\n                newChild.appendChild(newChildContent);\n                parentEl.appendChild(newChild);\n            });\n            return parentEl;\n        }\n    }\n    catch (e) {\n        throw e;\n    }\n};\nconst tablize = (wrapperId, tvalResult) => {\n    try {\n        const wrapper = document.getElementById(wrapperId);\n        if (!wrapper) {\n            throw new Error(`Container element is not found by id ${wrapperId}`);\n        }\n        const table = document.createElement('table');\n        table.classList.add('tvalTable');\n        const thead = table.createTHead();\n        const theadRow = thead.insertRow();\n        appendChildrenWithTextNodes(theadRow, 'th', ['Type', 'isMatched', 'Prop', 'Value']);\n        const tbody = table.createTBody();\n        tvalResult.forEach((el) => {\n            const tr = tbody.insertRow();\n            appendChildrenWithTextNodes(tr, 'td', [(0, helpers_1.numberToType)(el.validator), el.result, el.key, el.value]);\n        });\n        table.appendChild(tbody);\n        wrapper.appendChild(table);\n    }\n    catch (e) {\n        throw e;\n    }\n};\nexports.tablize = tablize;\nconst tvalLog = (tvalResults, onlyFalsy = false) => {\n    try {\n        if (!tvalResults.length || !tvalResults?.[0]?.key) {\n            throw new Error('Некорректный результат Tval');\n        }\n        if (onlyFalsy) {\n            tvalResults = tvalResults.filter((el) => el.result !== true);\n        }\n        const p = new console_table_printer_1.Table({\n            title: 'Tval result',\n            columns: [\n                { name: 'type', alignment: 'left', color: 'black' },\n                { name: 'isMatched', alignment: 'left' },\n                { name: 'prop', alignment: 'left', color: 'black' },\n                { name: 'value', alignment: 'left', color: 'black' }\n            ]\n        });\n        tvalResults.forEach((tvalResult) => {\n            const consoleTvalObject = {\n                type: (0, helpers_1.numberToType)(tvalResult.validator),\n                isMatched: tvalResult.result,\n                prop: tvalResult.key,\n                value: tvalResult.value\n            };\n            p.addRow(consoleTvalObject, { color: tvalResult.result === true ? 'green' : 'red' });\n        });\n        p.printTable();\n    }\n    catch (e) {\n        throw e;\n    }\n};\nexports.tvalLog = tvalLog;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.renderTable = exports.printTable = exports.Table = void 0;\nconst console_table_printer_1 = __importDefault(require(\"./src/console-table-printer\"));\nexports.Table = console_table_printer_1.default;\nconst internal_table_printer_1 = require(\"./src/internalTable/internal-table-printer\");\nObject.defineProperty(exports, \"printTable\", { enumerable: true, get: function () { return internal_table_printer_1.printSimpleTable; } });\nObject.defineProperty(exports, \"renderTable\", { enumerable: true, get: function () { return internal_table_printer_1.renderSimpleTable; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst internal_table_1 = __importDefault(require(\"./internalTable/internal-table\"));\nconst table_helpers_1 = require(\"./utils/table-helpers\");\nclass Table {\n    constructor(options) {\n        this.table = new internal_table_1.default(options);\n    }\n    addColumn(column) {\n        this.table.addColumn(column);\n        return this;\n    }\n    addColumns(columns) {\n        this.table.addColumns(columns);\n        return this;\n    }\n    addRow(text, rowOptions) {\n        this.table.addRow(text, (0, table_helpers_1.convertRawRowOptionsToStandard)(rowOptions));\n        return this;\n    }\n    addRows(toBeInsertedRows, rowOptions) {\n        this.table.addRows(toBeInsertedRows, (0, table_helpers_1.convertRawRowOptionsToStandard)(rowOptions));\n        return this;\n    }\n    printTable() {\n        const tableRendered = this.table.renderTable();\n        console.log(tableRendered);\n    }\n    render() {\n        return this.table.renderTable();\n    }\n}\nexports.default = Table;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rawColumnToInternalColumn = exports.objIfExists = void 0;\nconst table_constants_1 = require(\"../utils/table-constants\");\nconst objIfExists = (key, val) => {\n    if (!val) {\n        return {};\n    }\n    return {\n        [key]: val,\n    };\n};\nexports.objIfExists = objIfExists;\nconst rawColumnToInternalColumn = (column) => (Object.assign(Object.assign(Object.assign(Object.assign({ name: column.name, title: column.title || column.name }, (0, exports.objIfExists)('color', column.color)), (0, exports.objIfExists)('maxLen', column.maxLen)), (0, exports.objIfExists)('minLen', column.minLen)), { alignment: column.alignment || table_constants_1.DEFAULT_ROW_ALIGNMENT }));\nexports.rawColumnToInternalColumn = rawColumnToInternalColumn;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.printSimpleTable = exports.renderSimpleTable = exports.renderTable = void 0;\nconst colored_console_line_1 = __importDefault(require(\"../utils/colored-console-line\"));\nconst string_utils_1 = require(\"../utils/string-utils\");\nconst table_constants_1 = require(\"../utils/table-constants\");\nconst table_helpers_1 = require(\"../utils/table-helpers\");\nconst internal_table_1 = __importDefault(require(\"./internal-table\"));\nconst table_pre_processors_1 = require(\"./table-pre-processors\");\n// ║ Index ║         ║        ║\nconst renderOneLine = (tableStyle, columns, currentLineIndex, widthLimitedColumnsArray, isHeader, row, colorMap, charLength) => {\n    const line = new colored_console_line_1.default(colorMap);\n    line.addCharsWithColor('', tableStyle.vertical); // dont Color the Column borders\n    columns.forEach((column) => {\n        const thisLineHasText = currentLineIndex < widthLimitedColumnsArray[column.name].length;\n        const textForThisLine = thisLineHasText\n            ? (0, table_helpers_1.cellText)(widthLimitedColumnsArray[column.name][currentLineIndex])\n            : '';\n        line.addCharsWithColor(table_constants_1.DEFAULT_ROW_FONT_COLOR, ' ');\n        line.addCharsWithColor((isHeader && table_constants_1.DEFAULT_HEADER_FONT_COLOR) || column.color || row.color, (0, string_utils_1.textWithPadding)(textForThisLine, column.alignment || table_constants_1.DEFAULT_ROW_ALIGNMENT, column.length || table_constants_1.DEFAULT_COLUMN_LEN, charLength));\n        line.addCharsWithColor('', ` ${tableStyle.vertical}`); // dont Color the Column borders\n    });\n    return line.renderConsole();\n};\n// ║ Bold  ║    text ║  value ║\n// ║ Index ║         ║        ║\nconst renderWidthLimitedLines = (tableStyle, columns, row, colorMap, isHeader, charLength) => {\n    // { col1: ['How', 'Is', 'Going'], col2: ['I am', 'Tom'],  }\n    const widthLimitedColumnsArray = (0, table_helpers_1.getWidthLimitedColumnsArray)(columns, row, charLength);\n    const totalLines = Object.values(widthLimitedColumnsArray).reduce((a, b) => Math.max(a, b.length), 0);\n    const ret = [];\n    for (let currentLineIndex = 0; currentLineIndex < totalLines; currentLineIndex += 1) {\n        const singleLine = renderOneLine(tableStyle, columns, currentLineIndex, widthLimitedColumnsArray, isHeader, row, colorMap, charLength);\n        ret.push(singleLine);\n    }\n    return ret;\n};\n// ║ 1     ║     I would like some red wine please ║ 10.212 ║\nconst renderRow = (table, row) => {\n    let ret = [];\n    ret = ret.concat(renderWidthLimitedLines(table.tableStyle, table.columns, row, table.colorMap, undefined, table.charLength));\n    return ret;\n};\n/*\n                  The analysis Result\n ╔═══════╦═══════════════════════════════════════╦════════╗\n*/\nconst renderTableTitle = (table) => {\n    const ret = [];\n    if (table.title === undefined) {\n        return ret;\n    }\n    const getTableWidth = () => {\n        const reducer = (accumulator, currentValue) => \n        // ║ cell ║, 2 spaces + cellTextSize + one border on the left\n        accumulator + currentValue + 2 + 1;\n        return table.columns\n            .map((m) => m.length || table_constants_1.DEFAULT_COLUMN_LEN)\n            .reduce(reducer, 1);\n    };\n    const titleWithPadding = (0, string_utils_1.textWithPadding)(table.title, table_constants_1.DEFAULT_HEADER_ALIGNMENT, getTableWidth());\n    const styledText = new colored_console_line_1.default(table.colorMap);\n    styledText.addCharsWithColor(table_constants_1.DEFAULT_HEADER_FONT_COLOR, titleWithPadding);\n    //                  The analysis Result\n    ret.push(styledText.renderConsole());\n    return ret;\n};\n/*\n ╔═══════╦═══════════════════════════════════════╦════════╗\n ║ index ║                                  text ║  value ║\n ╟═══════╬═══════════════════════════════════════╬════════╢\n*/\nconst renderTableHeaders = (table) => {\n    let ret = [];\n    // ╔═══════╦═══════════════════════════════════════╦════════╗\n    ret.push((0, table_helpers_1.renderTableHorizontalBorders)(table.tableStyle.headerTop, table.columns.map((m) => m.length || table_constants_1.DEFAULT_COLUMN_LEN)));\n    // ║ index ║                                  text ║  value ║\n    const row = (0, table_helpers_1.createHeaderAsRow)(table_helpers_1.createRow, table.columns);\n    ret = ret.concat(renderWidthLimitedLines(table.tableStyle, table.columns, row, table.colorMap, true));\n    // ╟═══════╬═══════════════════════════════════════╬════════╢\n    ret.push((0, table_helpers_1.renderTableHorizontalBorders)(table.tableStyle.headerBottom, table.columns.map((m) => m.length || table_constants_1.DEFAULT_COLUMN_LEN)));\n    return ret;\n};\nconst renderTableEnding = (table) => {\n    const ret = [];\n    // ╚═══════╩═══════════════════════════════════════╩════════╝\n    ret.push((0, table_helpers_1.renderTableHorizontalBorders)(table.tableStyle.tableBottom, table.columns.map((m) => m.length || table_constants_1.DEFAULT_COLUMN_LEN)));\n    return ret;\n};\nconst renderRowSeparator = (table, row) => {\n    const ret = [];\n    const lastRowIndex = table.rows.length - 1;\n    const currentRowIndex = table.rows.indexOf(row);\n    if (currentRowIndex !== lastRowIndex && row.separator) {\n        // ╟═══════╬═══════════════════════════════════════╬════════╢\n        ret.push((0, table_helpers_1.renderTableHorizontalBorders)(table.tableStyle.rowSeparator, table.columns.map((m) => m.length || table_constants_1.DEFAULT_COLUMN_LEN)));\n    }\n    return ret;\n};\nconst renderTable = (table) => {\n    (0, table_pre_processors_1.preProcessColumns)(table); // enable / disable cols, find maxLn of each col/ computed Columns\n    (0, table_pre_processors_1.preProcessRows)(table); // sort and filter\n    const ret = [];\n    renderTableTitle(table).forEach((row) => ret.push(row));\n    renderTableHeaders(table).forEach((row) => ret.push(row));\n    table.rows.forEach((row) => {\n        renderRow(table, row).forEach((row_) => ret.push(row_));\n        renderRowSeparator(table, row).forEach((row_) => ret.push(row_));\n    });\n    renderTableEnding(table).forEach((row) => ret.push(row));\n    return ret.join('\\n');\n};\nexports.renderTable = renderTable;\nconst renderSimpleTable = (rows) => {\n    const table = new internal_table_1.default();\n    table.addRows(rows);\n    return (0, exports.renderTable)(table);\n};\nexports.renderSimpleTable = renderSimpleTable;\nconst printSimpleTable = (rows) => {\n    console.log((0, exports.renderSimpleTable)(rows));\n};\nexports.printSimpleTable = printSimpleTable;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst colored_console_line_1 = require(\"../utils/colored-console-line\");\nconst table_constants_1 = require(\"../utils/table-constants\");\nconst table_helpers_1 = require(\"../utils/table-helpers\");\nconst input_converter_1 = require(\"./input-converter\");\nconst internal_table_printer_1 = require(\"./internal-table-printer\");\nconst DEFAULT_ROW_SORT_FUNC = () => 0;\nconst DEFAULT_ROW_FILTER_FUNC = () => true;\nclass TableInternal {\n    constructor(options) {\n        // default construction\n        this.rows = [];\n        this.columns = [];\n        this.title = undefined;\n        this.tableStyle = table_constants_1.DEFAULT_TABLE_STYLE;\n        this.filterFunction = DEFAULT_ROW_FILTER_FUNC;\n        this.sortFunction = DEFAULT_ROW_SORT_FUNC;\n        this.enabledColumns = [];\n        this.disabledColumns = [];\n        this.computedColumns = [];\n        this.rowSeparator = table_constants_1.DEFAULT_ROW_SEPARATOR;\n        this.colorMap = colored_console_line_1.DEFAULT_COLOR_MAP;\n        this.charLength = {};\n        if (options instanceof Array) {\n            this.initSimple(options);\n        }\n        else if (typeof options === 'object') {\n            this.initDetailed(options);\n        }\n    }\n    initSimple(columns) {\n        this.columns = columns.map((column) => ({\n            name: column,\n            title: column,\n            alignment: table_constants_1.DEFAULT_ROW_ALIGNMENT,\n        }));\n    }\n    initDetailed(options) {\n        var _a;\n        this.title = (options === null || options === void 0 ? void 0 : options.title) || this.title;\n        this.tableStyle = (options === null || options === void 0 ? void 0 : options.style) || this.tableStyle;\n        this.sortFunction = (options === null || options === void 0 ? void 0 : options.sort) || this.sortFunction;\n        this.filterFunction = (options === null || options === void 0 ? void 0 : options.filter) || this.filterFunction;\n        this.enabledColumns = (options === null || options === void 0 ? void 0 : options.enabledColumns) || this.enabledColumns;\n        this.disabledColumns = (options === null || options === void 0 ? void 0 : options.disabledColumns) || this.disabledColumns;\n        this.computedColumns = (options === null || options === void 0 ? void 0 : options.computedColumns) || this.computedColumns;\n        this.columns =\n            ((_a = options === null || options === void 0 ? void 0 : options.columns) === null || _a === void 0 ? void 0 : _a.map(input_converter_1.rawColumnToInternalColumn)) || this.columns;\n        this.rowSeparator = (options === null || options === void 0 ? void 0 : options.rowSeparator) || this.rowSeparator;\n        this.charLength = (options === null || options === void 0 ? void 0 : options.charLength) || this.charLength;\n        if (options === null || options === void 0 ? void 0 : options.colorMap) {\n            this.colorMap = Object.assign(Object.assign({}, this.colorMap), options.colorMap);\n        }\n        if (options.rows !== undefined) {\n            this.addRows(options.rows);\n        }\n    }\n    createColumnFromRow(text) {\n        const colNames = this.columns.map((col) => col.name);\n        Object.keys(text).forEach((key) => {\n            if (!colNames.includes(key)) {\n                this.columns.push((0, table_helpers_1.createColumFromOnlyName)(key));\n            }\n        });\n    }\n    addColumn(textOrObj) {\n        if (typeof textOrObj === 'string') {\n            this.columns.push((0, table_helpers_1.createColumFromOnlyName)(textOrObj));\n        }\n        else {\n            this.columns.push((0, table_helpers_1.createColumFromComputedColumn)(textOrObj));\n        }\n    }\n    addColumns(toBeInsertedColumns) {\n        toBeInsertedColumns.forEach((toBeInsertedColumn) => {\n            this.addColumn(toBeInsertedColumn);\n        });\n    }\n    addRow(text, options) {\n        this.createColumnFromRow(text);\n        this.rows.push((0, table_helpers_1.createRow)((options === null || options === void 0 ? void 0 : options.color) || table_constants_1.DEFAULT_ROW_FONT_COLOR, text, (options === null || options === void 0 ? void 0 : options.separator) !== undefined\n            ? options === null || options === void 0 ? void 0 : options.separator\n            : this.rowSeparator));\n    }\n    addRows(toBeInsertedRows, options) {\n        toBeInsertedRows.forEach((toBeInsertedRow) => {\n            this.addRow(toBeInsertedRow, options);\n        });\n    }\n    renderTable() {\n        return (0, internal_table_printer_1.renderTable)(this);\n    }\n}\nexports.default = TableInternal;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.preProcessRows = exports.preProcessColumns = void 0;\nconst table_helpers_1 = require(\"../utils/table-helpers\");\nconst createComputedColumnsIfNecessary = (table) => {\n    if (table.computedColumns.length) {\n        table.computedColumns.forEach((computedColumn) => {\n            table.addColumn(computedColumn);\n            table.rows.forEach((row) => {\n                row.text[computedColumn.name] = computedColumn.function(row.text);\n            });\n        });\n    }\n};\nconst disableColumnsIfNecessary = (table) => {\n    if (table.enabledColumns.length) {\n        table.columns = table.columns.filter((col) => table.enabledColumns.includes(col.name));\n    }\n};\nconst enableColumnsIfNecessary = (table) => {\n    if (table.disabledColumns.length) {\n        table.columns = table.columns.filter((col) => !table.disabledColumns.includes(col.name));\n    }\n};\nconst findColumnWidth = (table) => {\n    table.columns.forEach((column) => {\n        column.length = (0, table_helpers_1.findLenOfColumn)(column, table.rows, table.charLength);\n    });\n};\nconst preProcessColumns = (table) => {\n    createComputedColumnsIfNecessary(table);\n    enableColumnsIfNecessary(table);\n    disableColumnsIfNecessary(table);\n    findColumnWidth(table);\n};\nexports.preProcessColumns = preProcessColumns;\nconst preProcessRows = (table) => {\n    const newRows = table.rows\n        .filter((r) => table.filterFunction(r.text))\n        .sort((r1, r2) => table.sortFunction(r1.text, r2.text));\n    table.rows = newRows;\n};\nexports.preProcessRows = preProcessRows;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_COLOR_MAP = void 0;\nexports.DEFAULT_COLOR_MAP = {\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m',\n    white: '\\x1b[37m',\n    crimson: '\\x1b[38m',\n    white_bold: '\\x1b[01m',\n    reset: '\\x1b[0m',\n};\nclass ColoredConsoleLine {\n    constructor(colorMap = exports.DEFAULT_COLOR_MAP) {\n        this.text = '';\n        this.colorMap = colorMap;\n    }\n    addCharsWithColor(color, text) {\n        const colorAnsi = this.colorMap[color];\n        this.text +=\n            colorAnsi !== undefined\n                ? `${colorAnsi}${text}${this.colorMap.reset}`\n                : text;\n    }\n    renderConsole() {\n        return this.text;\n    }\n}\nexports.default = ColoredConsoleLine;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findWidthInConsole = void 0;\nconst simple_wcswidth_1 = require(\"simple-wcswidth\");\n/* eslint-disable no-control-regex */\nconst colorRegex = /\\x1b\\[\\d{1,3}m/g; // \\x1b[30m  \\x1b[305m\nconst stripAnsi = (str) => str.replace(colorRegex, '');\nconst findWidthInConsole = (str, charLength) => {\n    let strLen = 0;\n    str = stripAnsi(str);\n    if (charLength) {\n        Object.entries(charLength).forEach(([key, value]) => {\n            // count appearance of the key in the string and remove from original string\n            let regex = new RegExp(key, 'g');\n            strLen += (str.match(regex) || []).length * value;\n            str = str.replace(key, '');\n        });\n    }\n    strLen += (0, simple_wcswidth_1.wcswidth)(str);\n    return strLen;\n};\nexports.findWidthInConsole = findWidthInConsole;\nexports.default = exports.findWidthInConsole;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.biggestWordInSentence = exports.limitWidth = exports.textWithPadding = void 0;\nconst console_utils_1 = __importDefault(require(\"./console-utils\"));\n// (\"How are you?\",center, 20) => \"    How are you?    \"\n// (\"How are you?\",right, 20)  => \"        How are you?\"\nconst textWithPadding = (text, alignment, columnLen, charLength) => {\n    const curTextSize = (0, console_utils_1.default)(text, charLength);\n    // alignments for center padding case\n    const leftPadding = Math.floor((columnLen - curTextSize) / 2);\n    const rightPadding = columnLen - leftPadding - curTextSize;\n    // handle edge cases where the text size is larger than the column length\n    if (columnLen < curTextSize) {\n        return text;\n    }\n    // console.log(text, columnLen, curTextSize);\n    switch (alignment) {\n        case 'left':\n            return text.concat(' '.repeat(columnLen - curTextSize));\n        case 'center':\n            return ' '\n                .repeat(leftPadding)\n                .concat(text)\n                .concat(' '.repeat(rightPadding));\n        case 'right':\n        default:\n            return ' '.repeat(columnLen - curTextSize).concat(text);\n    }\n};\nexports.textWithPadding = textWithPadding;\n// (\"How are you?\",10) => [\"How are \", \"you?\"]\nconst limitWidth = (inpStr, width, charLength) => {\n    const ret = [];\n    const spaceSeparatedStrings = inpStr.split(' ');\n    let now = [];\n    let cnt = 0;\n    spaceSeparatedStrings.forEach((strWithoutSpace) => {\n        const consoleWidth = (0, console_utils_1.default)(strWithoutSpace, charLength);\n        if (cnt + consoleWidth <= width) {\n            cnt += consoleWidth + 1; // 1 for the space\n            now.push(strWithoutSpace);\n        }\n        else {\n            ret.push(now.join(' '));\n            now = [strWithoutSpace];\n            cnt = consoleWidth + 1;\n        }\n    });\n    ret.push(now.join(' '));\n    return ret;\n};\nexports.limitWidth = limitWidth;\n// (\"How are you?\",10) => [\"How are \", \"you?\"]\nconst biggestWordInSentence = (inpStr, charLength) => inpStr\n    .split(' ')\n    .reduce((a, b) => Math.max(a, (0, console_utils_1.default)(b, charLength)), 0);\nexports.biggestWordInSentence = biggestWordInSentence;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_HEADER_ALIGNMENT = exports.DEFAULT_ROW_ALIGNMENT = exports.DEFAULT_HEADER_FONT_COLOR = exports.DEFAULT_ROW_FONT_COLOR = exports.COLORS = exports.ALIGNMENTS = exports.DEFAULT_TABLE_STYLE = exports.DEFAULT_ROW_SEPARATOR = exports.DEFAULT_COLUMN_LEN = void 0;\nexports.DEFAULT_COLUMN_LEN = 20;\nexports.DEFAULT_ROW_SEPARATOR = false;\nexports.DEFAULT_TABLE_STYLE = {\n    /*\n        Default Style\n        ┌────────────┬─────┬──────┐\n        │ foo        │ bar │ baz  │\n        │ frobnicate │ bar │ quuz │\n        └────────────┴─────┴──────┘\n        */\n    headerTop: {\n        left: '┌',\n        mid: '┬',\n        right: '┐',\n        other: '─',\n    },\n    headerBottom: {\n        left: '├',\n        mid: '┼',\n        right: '┤',\n        other: '─',\n    },\n    tableBottom: {\n        left: '└',\n        mid: '┴',\n        right: '┘',\n        other: '─',\n    },\n    vertical: '│',\n    rowSeparator: {\n        left: '├',\n        mid: '┼',\n        right: '┤',\n        other: '─',\n    },\n};\nexports.ALIGNMENTS = ['right', 'left', 'center'];\nexports.COLORS = [\n    'red',\n    'green',\n    'yellow',\n    'white',\n    'blue',\n    'magenta',\n    'cyan',\n    'crimson',\n    'white_bold',\n    'reset',\n];\nexports.DEFAULT_ROW_FONT_COLOR = 'white';\nexports.DEFAULT_HEADER_FONT_COLOR = 'white_bold';\nexports.DEFAULT_ROW_ALIGNMENT = 'right';\nexports.DEFAULT_HEADER_ALIGNMENT = 'center';\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getWidthLimitedColumnsArray = exports.createHeaderAsRow = exports.renderTableHorizontalBorders = exports.findLenOfColumn = exports.createRow = exports.createColumFromComputedColumn = exports.createColumFromOnlyName = exports.createTableHorizontalBorders = exports.convertRawRowOptionsToStandard = exports.cellText = void 0;\nconst input_converter_1 = require(\"../internalTable/input-converter\");\nconst console_utils_1 = __importDefault(require(\"./console-utils\"));\nconst string_utils_1 = require(\"./string-utils\");\nconst table_constants_1 = require(\"./table-constants\");\nconst max = (a, b) => Math.max(a, b);\n// takes any input that is given by user and converts to string\nconst cellText = (text) => text === undefined || text === null ? '' : `${text}`;\nexports.cellText = cellText;\nconst convertRawRowOptionsToStandard = (options) => {\n    if (options) {\n        return {\n            color: options.color,\n            separator: options.separator || table_constants_1.DEFAULT_ROW_SEPARATOR,\n        };\n    }\n    return undefined;\n};\nexports.convertRawRowOptionsToStandard = convertRawRowOptionsToStandard;\nconst createTableHorizontalBorders = ({ left, mid, right, other, }, column_lengths) => {\n    // ╚\n    let ret = left;\n    // ╚═══════╩═══════════════════════════════════════╩════════╩\n    column_lengths.forEach((len) => {\n        ret += other.repeat(len + 2);\n        ret += mid;\n    });\n    // ╚═══════╩═══════════════════════════════════════╩════════\n    ret = ret.slice(0, -mid.length);\n    // ╚═══════╩═══════════════════════════════════════╩════════╝\n    ret += right;\n    return ret;\n};\nexports.createTableHorizontalBorders = createTableHorizontalBorders;\nconst createColumFromOnlyName = (name) => ({\n    name,\n    title: name,\n});\nexports.createColumFromOnlyName = createColumFromOnlyName;\nconst createColumFromComputedColumn = (column) => (Object.assign(Object.assign(Object.assign(Object.assign({ name: column.name, title: column.title || column.name }, (0, input_converter_1.objIfExists)('color', column.color)), (0, input_converter_1.objIfExists)('maxLen', column.maxLen)), (0, input_converter_1.objIfExists)('minLen', column.minLen)), { alignment: column.alignment || table_constants_1.DEFAULT_ROW_ALIGNMENT }));\nexports.createColumFromComputedColumn = createColumFromComputedColumn;\nconst createRow = (color, text, separator) => ({\n    color,\n    separator,\n    text,\n});\nexports.createRow = createRow;\nconst findLenOfColumn = (column, rows, charLength) => {\n    const columnId = column.name;\n    const columnTitle = column.title;\n    let length = max(0, (column === null || column === void 0 ? void 0 : column.minLen) || 0);\n    if (column.maxLen) {\n        // if customer input is mentioned a max width, lets see if all other can fit here\n        // if others cant fit find the max word length so that at least the table can be printed\n        length = max(length, max(column.maxLen, (0, string_utils_1.biggestWordInSentence)(columnTitle, charLength)));\n        length = rows.reduce((acc, row) => max(acc, (0, string_utils_1.biggestWordInSentence)((0, exports.cellText)(row.text[columnId]), charLength)), length);\n        return length;\n    }\n    length = max(length, (0, console_utils_1.default)(columnTitle, charLength));\n    rows.forEach((row) => {\n        length = max(length, (0, console_utils_1.default)((0, exports.cellText)(row.text[columnId]), charLength));\n    });\n    return length;\n};\nexports.findLenOfColumn = findLenOfColumn;\nconst renderTableHorizontalBorders = (style, column_lengths) => {\n    const str = (0, exports.createTableHorizontalBorders)(style, column_lengths);\n    return str;\n};\nexports.renderTableHorizontalBorders = renderTableHorizontalBorders;\nconst createHeaderAsRow = (createRowFn, columns) => {\n    const headerColor = table_constants_1.DEFAULT_HEADER_FONT_COLOR;\n    const row = createRowFn(headerColor, {}, false);\n    columns.forEach((column) => {\n        row.text[column.name] = column.title;\n    });\n    return row;\n};\nexports.createHeaderAsRow = createHeaderAsRow;\n// { col1: ['How', 'Is', 'Going'], col2: ['I am', 'Tom'],  }\nconst getWidthLimitedColumnsArray = (columns, row, charLength) => {\n    const ret = {};\n    columns.forEach((column) => {\n        ret[column.name] = (0, string_utils_1.limitWidth)((0, exports.cellText)(row.text[column.name]), column.length || table_constants_1.DEFAULT_COLUMN_LEN, charLength);\n    });\n    return ret;\n};\nexports.getWidthLimitedColumnsArray = getWidthLimitedColumnsArray;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wcswidth = exports.wcwidth = void 0;\nconst wcswidth_1 = __importDefault(require(\"./src/wcswidth\"));\nexports.wcswidth = wcswidth_1.default;\nconst wcwidth_1 = __importDefault(require(\"./src/wcwidth\"));\nexports.wcwidth = wcwidth_1.default;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* auxiliary function for binary search in interval table */\nconst bisearch = (ucs, table, tableSize) => {\n    let min = 0;\n    let mid;\n    let max = tableSize;\n    if (ucs < table[0].first || ucs > table[max].last)\n        return 0;\n    while (max >= min) {\n        mid = Math.floor((min + max) / 2);\n        if (ucs > table[mid].last) {\n            min = mid + 1;\n        }\n        else if (ucs < table[mid].first) {\n            max = mid - 1;\n        }\n        else {\n            return 1;\n        }\n    }\n    return 0;\n};\nexports.default = bisearch;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* sorted list of non-overlapping intervals of non-spacing characters */\n/* generated by \"uniset +cat=Me +cat=Mn +cat=Cf -00AD +1160-11FF +200B c\" */\nconst combining = [\n    { first: 0x0300, last: 0x036f },\n    { first: 0x0483, last: 0x0486 },\n    { first: 0x0488, last: 0x0489 },\n    { first: 0x0591, last: 0x05bd },\n    { first: 0x05bf, last: 0x05bf },\n    { first: 0x05c1, last: 0x05c2 },\n    { first: 0x05c4, last: 0x05c5 },\n    { first: 0x05c7, last: 0x05c7 },\n    { first: 0x0600, last: 0x0603 },\n    { first: 0x0610, last: 0x0615 },\n    { first: 0x064b, last: 0x065e },\n    { first: 0x0670, last: 0x0670 },\n    { first: 0x06d6, last: 0x06e4 },\n    { first: 0x06e7, last: 0x06e8 },\n    { first: 0x06ea, last: 0x06ed },\n    { first: 0x070f, last: 0x070f },\n    { first: 0x0711, last: 0x0711 },\n    { first: 0x0730, last: 0x074a },\n    { first: 0x07a6, last: 0x07b0 },\n    { first: 0x07eb, last: 0x07f3 },\n    { first: 0x0901, last: 0x0902 },\n    { first: 0x093c, last: 0x093c },\n    { first: 0x0941, last: 0x0948 },\n    { first: 0x094d, last: 0x094d },\n    { first: 0x0951, last: 0x0954 },\n    { first: 0x0962, last: 0x0963 },\n    { first: 0x0981, last: 0x0981 },\n    { first: 0x09bc, last: 0x09bc },\n    { first: 0x09c1, last: 0x09c4 },\n    { first: 0x09cd, last: 0x09cd },\n    { first: 0x09e2, last: 0x09e3 },\n    { first: 0x0a01, last: 0x0a02 },\n    { first: 0x0a3c, last: 0x0a3c },\n    { first: 0x0a41, last: 0x0a42 },\n    { first: 0x0a47, last: 0x0a48 },\n    { first: 0x0a4b, last: 0x0a4d },\n    { first: 0x0a70, last: 0x0a71 },\n    { first: 0x0a81, last: 0x0a82 },\n    { first: 0x0abc, last: 0x0abc },\n    { first: 0x0ac1, last: 0x0ac5 },\n    { first: 0x0ac7, last: 0x0ac8 },\n    { first: 0x0acd, last: 0x0acd },\n    { first: 0x0ae2, last: 0x0ae3 },\n    { first: 0x0b01, last: 0x0b01 },\n    { first: 0x0b3c, last: 0x0b3c },\n    { first: 0x0b3f, last: 0x0b3f },\n    { first: 0x0b41, last: 0x0b43 },\n    { first: 0x0b4d, last: 0x0b4d },\n    { first: 0x0b56, last: 0x0b56 },\n    { first: 0x0b82, last: 0x0b82 },\n    { first: 0x0bc0, last: 0x0bc0 },\n    { first: 0x0bcd, last: 0x0bcd },\n    { first: 0x0c3e, last: 0x0c40 },\n    { first: 0x0c46, last: 0x0c48 },\n    { first: 0x0c4a, last: 0x0c4d },\n    { first: 0x0c55, last: 0x0c56 },\n    { first: 0x0cbc, last: 0x0cbc },\n    { first: 0x0cbf, last: 0x0cbf },\n    { first: 0x0cc6, last: 0x0cc6 },\n    { first: 0x0ccc, last: 0x0ccd },\n    { first: 0x0ce2, last: 0x0ce3 },\n    { first: 0x0d41, last: 0x0d43 },\n    { first: 0x0d4d, last: 0x0d4d },\n    { first: 0x0dca, last: 0x0dca },\n    { first: 0x0dd2, last: 0x0dd4 },\n    { first: 0x0dd6, last: 0x0dd6 },\n    { first: 0x0e31, last: 0x0e31 },\n    { first: 0x0e34, last: 0x0e3a },\n    { first: 0x0e47, last: 0x0e4e },\n    { first: 0x0eb1, last: 0x0eb1 },\n    { first: 0x0eb4, last: 0x0eb9 },\n    { first: 0x0ebb, last: 0x0ebc },\n    { first: 0x0ec8, last: 0x0ecd },\n    { first: 0x0f18, last: 0x0f19 },\n    { first: 0x0f35, last: 0x0f35 },\n    { first: 0x0f37, last: 0x0f37 },\n    { first: 0x0f39, last: 0x0f39 },\n    { first: 0x0f71, last: 0x0f7e },\n    { first: 0x0f80, last: 0x0f84 },\n    { first: 0x0f86, last: 0x0f87 },\n    { first: 0x0f90, last: 0x0f97 },\n    { first: 0x0f99, last: 0x0fbc },\n    { first: 0x0fc6, last: 0x0fc6 },\n    { first: 0x102d, last: 0x1030 },\n    { first: 0x1032, last: 0x1032 },\n    { first: 0x1036, last: 0x1037 },\n    { first: 0x1039, last: 0x1039 },\n    { first: 0x1058, last: 0x1059 },\n    { first: 0x1160, last: 0x11ff },\n    { first: 0x135f, last: 0x135f },\n    { first: 0x1712, last: 0x1714 },\n    { first: 0x1732, last: 0x1734 },\n    { first: 0x1752, last: 0x1753 },\n    { first: 0x1772, last: 0x1773 },\n    { first: 0x17b4, last: 0x17b5 },\n    { first: 0x17b7, last: 0x17bd },\n    { first: 0x17c6, last: 0x17c6 },\n    { first: 0x17c9, last: 0x17d3 },\n    { first: 0x17dd, last: 0x17dd },\n    { first: 0x180b, last: 0x180d },\n    { first: 0x18a9, last: 0x18a9 },\n    { first: 0x1920, last: 0x1922 },\n    { first: 0x1927, last: 0x1928 },\n    { first: 0x1932, last: 0x1932 },\n    { first: 0x1939, last: 0x193b },\n    { first: 0x1a17, last: 0x1a18 },\n    { first: 0x1b00, last: 0x1b03 },\n    { first: 0x1b34, last: 0x1b34 },\n    { first: 0x1b36, last: 0x1b3a },\n    { first: 0x1b3c, last: 0x1b3c },\n    { first: 0x1b42, last: 0x1b42 },\n    { first: 0x1b6b, last: 0x1b73 },\n    { first: 0x1dc0, last: 0x1dca },\n    { first: 0x1dfe, last: 0x1dff },\n    { first: 0x200b, last: 0x200f },\n    { first: 0x202a, last: 0x202e },\n    { first: 0x2060, last: 0x2063 },\n    { first: 0x206a, last: 0x206f },\n    { first: 0x20d0, last: 0x20ef },\n    { first: 0x302a, last: 0x302f },\n    { first: 0x3099, last: 0x309a },\n    { first: 0xa806, last: 0xa806 },\n    { first: 0xa80b, last: 0xa80b },\n    { first: 0xa825, last: 0xa826 },\n    { first: 0xfb1e, last: 0xfb1e },\n    { first: 0xfe00, last: 0xfe0f },\n    { first: 0xfe20, last: 0xfe23 },\n    { first: 0xfeff, last: 0xfeff },\n    { first: 0xfff9, last: 0xfffb },\n    { first: 0x10a01, last: 0x10a03 },\n    { first: 0x10a05, last: 0x10a06 },\n    { first: 0x10a0c, last: 0x10a0f },\n    { first: 0x10a38, last: 0x10a3a },\n    { first: 0x10a3f, last: 0x10a3f },\n    { first: 0x1d167, last: 0x1d169 },\n    { first: 0x1d173, last: 0x1d182 },\n    { first: 0x1d185, last: 0x1d18b },\n    { first: 0x1d1aa, last: 0x1d1ad },\n    { first: 0x1d242, last: 0x1d244 },\n    { first: 0xe0001, last: 0xe0001 },\n    { first: 0xe0020, last: 0xe007f },\n    { first: 0xe0100, last: 0xe01ef },\n];\nexports.default = combining;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst wcwidth_1 = __importDefault(require(\"./wcwidth\"));\nconst mk_wcswidth = (pwcs) => {\n    let width = 0;\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < pwcs.length; i++) {\n        const charCode = pwcs.charCodeAt(i);\n        const w = wcwidth_1.default(charCode);\n        if (w < 0) {\n            return -1;\n        }\n        width += w;\n    }\n    return width;\n};\nexports.default = mk_wcswidth;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst non_spacing_chars_1 = __importDefault(require(\"./non-spacing-chars\"));\nconst binary_search_1 = __importDefault(require(\"./binary-search\"));\n/* The following two functions define the column width of an ISO 10646\n * character as follows:\n *\n *    - The null character (U+0000) has a column width of 0.\n *\n *    - Other C0/C1 control characters and DEL will lead to a return\n *      value of -1.\n *\n *    - Non-spacing and enclosing combining characters (general\n *      category code Mn or Me in the Unicode database) have a\n *      column width of 0.\n *\n *    - SOFT HYPHEN (U+00AD) has a column width of 1.\n *\n *    - Other format characters (general category code Cf in the Unicode\n *      database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.\n *\n *    - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *      have a column width of 0.\n *\n *    - Spacing characters in the East Asian Wide (W) or East Asian\n *      Full-width (F) category as defined in Unicode Technical\n *      Report #11 have a column width of 2.\n *\n *    - All remaining characters (including all printable\n *      ISO 8859-1 and WGL4 characters, Unicode control characters,\n *      etc.) have a column width of 1.\n *\n * This implementation assumes that wchar_t characters are encoded\n * in ISO 10646.\n */\nconst mk_wcwidth = (ucs) => {\n    /* test for 8-bit control characters */\n    if (ucs === 0) {\n        return 0;\n    }\n    if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) {\n        return -1;\n    }\n    /* binary search in table of non-spacing characters */\n    if (binary_search_1.default(ucs, non_spacing_chars_1.default, non_spacing_chars_1.default.length - 1)) {\n        return 0;\n    }\n    /* if we arrive here, ucs is not a combining or C0/C1 control character */\n    return (1 +\n        Number(ucs >= 0x1100 &&\n            (ucs <= 0x115f /* Hangul Jamo init. consonants */ ||\n                ucs === 0x2329 ||\n                ucs === 0x232a ||\n                (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) /* CJK ... Yi */ ||\n                (ucs >= 0xac00 && ucs <= 0xd7a3) /* Hangul Syllables */ ||\n                (ucs >= 0xf900 && ucs <= 0xfaff) /* CJK Compatibility Ideographs */ ||\n                (ucs >= 0xfe10 && ucs <= 0xfe19) /* Vertical forms */ ||\n                (ucs >= 0xfe30 && ucs <= 0xfe6f) /* CJK Compatibility Forms */ ||\n                (ucs >= 0xff00 && ucs <= 0xff60) /* Fullwidth Forms */ ||\n                (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n                (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n                (ucs >= 0x30000 && ucs <= 0x3fffd))));\n};\nexports.default = mk_wcwidth;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.ts\");\n",""],"names":[],"sourceRoot":""}